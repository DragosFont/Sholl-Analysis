[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "neuron-analyzer"
version = "1.0.0"
description = "Advanced neuron analysis tool for precise dendritic morphology analysis using freehand ROI selection"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Dragos Nelu Font", email = "fontdragos@gmail.com"}
]
maintainers = [
    {name = "Dragos Nel Font", email = "fontdragos@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Image Processing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
keywords = ["neuron", "analysis", "morphology", "dendrites", "sholl", "roi", "microscopy", "imaging"]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-image>=0.19.0",
    "opencv-python>=4.5.0",
    "Pillow>=8.3.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "aicsimageio>=4.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "isort>=5.9.0",
    "mypy>=0.910",
    "types-Pillow>=8.3.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
    "pre-commit>=2.15.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "memory-profiler>=0.58.0",
    "line-profiler>=3.3.0",
    "build>=0.7.0",
    "twine>=3.4.0",
    "wheel>=0.36.0",
]
czi = [
    "aicsimageio[all]>=4.9.0",
]
full = [
    "aicsimageio[all]>=4.9.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/neuron-analyzer"
Documentation = "https://github.com/yourusername/neuron-analyzer#readme"
Repository = "https://github.com/yourusername/neuron-analyzer.git"
"Bug Tracker" = "https://github.com/yourusername/neuron-analyzer/issues"
Changelog = "https://github.com/yourusername/neuron-analyzer/blob/main/CHANGELOG.md"

[project.scripts]
neuron-analyzer = "neuron_analyzer:main"
neuron-gui = "neuron_analyzer:main_gui"

[tool.setuptools]
packages = ["neuron_analyzer"]
include-package-data = true

[tool.setuptools.package-data]
neuron_analyzer = ["*.png", "*.ico", "data/*"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

# MyPy Configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=neuron_analyzer --cov-report=term-missing"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["neuron_analyzer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]